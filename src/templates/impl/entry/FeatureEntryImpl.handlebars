package {{ base_package }}.{{ flat module }}.impl.entry

import android.os.Bundle
import androidx.compose.runtime.Composable
import androidx.navigation.NavBackStackEntry
import androidx.navigation.NavController
import androidx.navigation.NavGraphBuilder
import androidx.navigation.NavHostController
import androidx.navigation.compose.composable
import androidx.navigation.navigation
import {{ base_package }}.data.api.DataProvider
import {{ base_package }}.{{ flat module }}.api.{{ pascal module }}FeatureEntry
import {{ base_package }}.{{ flat module }}.impl.di.Dagger{{ pascal module }}Component
import {{ base_package }}.{{ flat module }}.impl.di.{{ pascal module }}RootComponent
import {{ base_package }}.{{ flat module }}.impl.{{ flat first_page }}.screen.{{ pascal first_page }}Screen
import {{ base_package }}.navigation.CompositionLocals
import {{ base_package }}.navigation.RootComponentHolder
import {{ base_package }}.navigation.injectedViewModel
import {{ base_package }}.navigation.rememberScoped
import {{ base_package }}.platform.PlatformProvider
import javax.inject.Inject

/**
 * The entry point for the feature. Provides root component and navigation graph for the feature.
 */
class {{ pascal module }}FeatureEntryImpl @Inject constructor() : {{ pascal module }}FeatureEntry(),
    RootComponentHolder<{{ pascal module }}RootComponent> {
    override val rootRoute: String
        get() = "@{{ kebab module }}"

    override fun NavGraphBuilder.navigation(
        navController: NavHostController,
    ) {
        navigation(startDestination = featureRoute, route = rootRoute) {
            composable(featureRoute, arguments) { backstackEntry ->
                val rootComponent = rootComponent(backstackEntry, navController)

                val viewModel = injectedViewModel(backstackEntry) {
                    rootComponent.{{ camel first_page }}SubcomponentFactory.create().viewModel
                }

                {{ pascal first_page }}Screen(viewModel = viewModel)
            }
        }
    }

    @Composable
    override fun provideRootComponent(
        rootEntry: NavBackStackEntry,
        navController: NavController,
        arguments: Bundle?
    ): {{ pascal module }}RootComponent {
        val currentDataProvider = CompositionLocals.current<DataProvider>()
        val currentPlatformProvider = CompositionLocals.current<PlatformProvider>()
        return rememberScoped(rootEntry) {
            Dagger{{ pascal module }}RootComponent.builder()
                .dataProvider(currentDataProvider)
                .platformProvider(currentPlatformProvider)
                .build()
        }
    }
}