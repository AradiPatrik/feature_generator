package {{ base_package }}.{{ flat module }}.impl.di

import {{ base_package }}.data.api.DataProvider
import {{ base_package }}.{{ flat module }}.api.{{ pascal module }}Provider
import {{ base_package }}.navigation.NavigationProvider
import {{ base_package }}.{{ flat module }}.impl.{{ flat first_page }}.di.{{ pascal first_page }}Subcomponent
import {{ base_package }}.navigation.FeatureScoped
import {{ base_package }}.platform.PlatformProvider
import dagger.Component

/**
 * The root component for the feature. It is providing the feature-wide dependencies. Exposes them
 * to other features via [{{ pascal module }}Provider].
 */
@FeatureScoped
@Component(
    dependencies = [
        DataProvider::class,
        PlatformProvider::class,
        NavigationProvider::class,
    ],
    modules = [
        {{ pascal module }}RootModule::class,
        {{ pascal module }}SubcomponentsModule::class,
    ]
)
interface {{ pascal module }}RootComponent : {{ pascal module }}Provider {
    val {{ camel first_page }}SubcomponentFactory: {{ pascal first_page }}Subcomponent.Factory
}
